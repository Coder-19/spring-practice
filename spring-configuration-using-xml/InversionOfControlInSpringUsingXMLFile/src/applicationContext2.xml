<?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans" 
            xmlns:context="http://www.springframework.org/schema/context" 
            xmlns:mvc="http://www.springframework.org/schema/mvc" 
            xmlns:util="http://www.springframework.org/schema/util" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xsi:schemaLocation="
                http://www.springframework.org/schema/beans     
                http://www.springframework.org/schema/beans/spring-beans.xsd     
                http://www.springframework.org/schema/context     
                http://www.springframework.org/schema/context/spring-context.xsd     
                http://www.springframework.org/schema/mvc         
                http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                http://www.springframework.org/schema/util     
                http://www.springframework.org/schema/util/spring-util.xsd">
                
                             
      
      <!-- The code below is used to create a bean for the logger class and this bean will be 
      be set first so that it will be initialized first so as to get the logging messages corectly-->          
                
     <!-- 
	Add a logger config to see logging messages.		
	- For more detailed logs, set values to "FINEST"
	- For info on logging levels, see: http://www.vogella.com/tutorials/Logging/article.html
 	-->
    <bean id="myLoggerConfig" 
    	class="com.configuration.springConfiguration.MyLoggerConfig" 
    	init-method="initLogger">
    	
    	<!-- the code below is used to do the setter injection for rootlogger level and the
    	printedLogger level setter -->
    	<property name="rootLoggerLevel" value="FINE" />
    	<property name="printedLoggerLevel" value="FINE"/>
    	
    </bean>
    
    
    <!-- The code below is to use the context-property-placeholder tag to get access to the 
    properties file for getting the access to the data written in the properties file -->
    <context:property-placeholder location="classpath:sport.properties" />
    

	<!-- The code below is used to create a bean for the HappyFortuneService class for
	doing inversion of control -->

	<!-- In the line of code below the id property acts as the alias for the class object and the
	class property is used to get the location where our java class is located -->
	<bean id="happyFortune"
		class="com.dependencyInjectionInSpring.dependencyInterfaceAndClass.HappyFortuneService">
	</bean>
	
	
	<!-- The code below is used to create a bean for the randomFortuneService class for doing 
	inversion of control -->
	
	<!-- In the line of code below the id property acts as the alias for the class object and the
	class property is used to get the location where our java class is located -->
	<bean id="randomFortune"
		class="com.dependencyInjectionInSpring.dependencyInterfaceAndClass.RandomFortuneService">
	</bean>
		
	<!-- The code below is used to create a bean for the baseballCoach class for doing inversion
	of control -->
	
	<!-- In the line of code below the id property acts as the alias for the class object and the 
	class property is used to get the location where our java class is located -->
	<bean id="baseBallCoach"
		class="com.dependencyInjectionInSpring.constructorInjectionPractice.BaseballCoach"
		scope="singleton"
		init-method="customInitMethod"
		destroy-method="customDestroyMethod">

		<!-- The code below is to use the constructor-args tag to do dependency injection using
		constructor injection for giving daily fortunes to the baseball players -->
		<constructor-arg ref="happyFortune"/>

	</bean>
	
	<!-- The code below is used to create a bean for the trackcoach class for doing inversion of 
	control -->
	
	<!-- In the line of code below the id property acts as the alias for the class object and the 
	class property is used to get the location where our java class is located -->
	<bean id="trackCoach"
		class="com.inversionOfControl.sports.TrackCoach"
		scope="prototype">
	</bean>


	<!-- The code below is used to create a bean for the cricket coach class for doing inversion of
	control -->

	<!-- in the line of code below the id property acts as the alias for the class object and the
		class property is used to get the location where our java class is located -->
	<bean id="cricketCoach"
		class="com.dependencyInjectionInSpring.setterInjectionPractice.CricketCoach">

		<!-- the code below is to use the property tag to do the dependency injection using setter injection -->
		<property name="fortuneService" ref="happyFortune" />  <!-- The attribute name takes the name of the
		setter that is used for doing setter injection and ref takes the name of the  bean from which we
		want to get the dependency -->
		
		
		<!-- The code below is to use the property tag to inject the literal value in the coachEmailAddress property 
		defined in the CricketCoach class -->
		<property name="coachEmailAddress" value="theBestCoach@luv2Code.com" />  <!-- the attribute name takes 
		the name of the setter and the property value takes the value that we need to pass to the 
		setter for saving it -->
		
		<!-- the code below is to use the property tag to inject the literal value in the teamName
		property defined in the CricketCoach class -->
		<property name="teamName" value="Sunrisers Hyderabad" />

	</bean>
	
	
	<!-- The code below is used to create a bean for the footballCoach class for doing inversion
	of control -->
	
	<!-- in the line of code below the id property acts as the alias for the class object and the
		class property is used to get the location where our java class is located -->
	<bean id="goodCoach"
		class="com.gettingDataFromPropertiesFile.code.FootballCoach">
		
		<!-- the code below is to use the property tag to get do dependency injection using setter 
		injection for giving daily fortunes to the football players -->
		<property name="fortuneService" ref="happyFortune"/>
		
		<!-- the code below is to use the property tag to get the value from the property file and
		save it in the variable -->
		<property name="footballTeamName" value="${football.team}" />
		
		<!-- The code below is to use the property tag to get the email address of the coach from
		the properties file and save it in the variable -->
		<property name="coachEmailAddress" value="${football.emailAddress}" />
		
		
	</bean>
	
	
	<!-- the code below is to create a bean for the tennisCoach class for doing inversion of 
	control -->
	
	<!-- in the line of code below the id property acts as the alias for the class object and the
		class property is used to get the location where our java class is located -->
	<bean id="tennisCoach"
		class="com.randomFortunes.code.TennisCoach">
		
		<!-- The code below is to use the constructor-arg property for doing dependency injection 
		using constructor injection for giving daily fortunes to the tennis players -->
		<constructor-arg ref="randomFortune" />
		
	</bean>
	
	
</beans>